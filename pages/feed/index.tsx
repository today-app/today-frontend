import Head from 'next/head'
import WithHeader from '../../shared/layouts/WithHeader'
import { useDispatch, useSelector } from 'react-redux'
import { AppState } from '../../app/store'
import { useEffect } from 'react'
import { loadPublicFeed } from '../../features/post/postSlice'
import { push } from 'connected-next-router'

export default function FeedPage() {
  const dispatch = useDispatch()
  const { publicFeed, isPublicFeedLoading } = useSelector<AppState>(
    state => state.post,
  )
  useEffect(() => {
    dispatch(loadPublicFeed({}))
  }, [])

  useEffect(() => {
    function onScroll() {
      const hasMorePost = true
      if (
        window.scrollY + document.documentElement.clientHeight >
        document.documentElement.scrollHeight - 300
      ) {
        if (hasMorePost && !isPublicFeedLoading) {
          dispatch(loadPublicFeed({}))
        }
      }
    }
    window.addEventListener('scroll', onScroll)
    return () => {
      window.removeEventListener('scroll', onScroll)
    }
  }, [publicFeed, isPublicFeedLoading])

  return (
    <WithHeader>
      <div>
        <Head>
          <title>Feed</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>

        <div className='mx-auto max-w-7xl px-2 sm:px-4 lg:px-8'>
          <h1>Feed</h1>
          <div>
            {
              publicFeed.map((post) => (
                <div key={post.id} className='border rounded p-4'>
                  <div className="bg-yellow-400">
                    <a href={`/feed/${post.id}`} onClick={(e) => {
                      e.preventDefault()
                      dispatch(push({ pathname: `/feed/${ post.id}` }))
                    }}>
                      {post.id}

                    </a>
                  </div>
                  <div>
                  {post.title}
                  </div>
                  <hr />
                  <div>
                    comment: {post.commentCount}
                    /
                    likes: {post.likeCount}
                    /
                    repost: { post.repostCount }
                  </div>
                  <pre>{JSON.stringify(post, null, 2)}</pre>
                </div>
              ))
            }
          </div>
          {/*<pre>{ JSON.stringify(publicFeed, null, 2) }</pre>*/}

        </div>


      </div>
    </WithHeader>
  )
}
